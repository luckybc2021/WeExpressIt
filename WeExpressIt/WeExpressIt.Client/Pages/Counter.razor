@page "/counter"
@using VUI
@rendermode InteractiveWebAssembly

<PageTitle>Demo Counter with VUIElement, VUIButton, VUIMedia</PageTitle>

<h1>Demo Counter with VUIElement, VUIButton, VUIMedia</h1>

<select @bind="transitionType">
    <option>UIState</option>
    <option>UserDecision</option>
</select>

<VUIButton Text="Repeat Playing Video"
           TransitionType="@transitionType"
           Normal_BackgroundColor="#00ffff" 
           Clicked_BackgroundColor="#9900cc"
           MouseEnter_BackgroundColor="#00ff00"
           MouseLeave_BackgroundColor="#ffff00"
           MouseDown_BackgroundColor="#ff0066"
           MouseUp_BackgroundColor="#ff00ff"
           OnClicked="OnClicked"
           OnMouseDown="OnMouseDown"
           OnMouseLeave="OnMouseLeave" />

<p role="status">Current count: @currentCount</p>

<VUIButton ContentType="Image"
           ContentPath="Images/reset-icon-32.png"
           Normal_BackgroundColor="#00ffff"
           Clicked_BackgroundColor="#9900cc"
           MouseEnter_BackgroundColor="#00ff00"
           OnClicked="OnClicked_ResetCounting" />


<VUIMedia ID="Video" ContentType="Video"
            ContentPath="Videos/ShortVideo.mp4"
            Width="32px"
            Height="32px"
            OnReadyToUse="OnReadyToUse_It" 
            OnCurrentTimeUpdate="OnCurrentTimeUpdate_Video" />


<VUIMedia ID="Audio" ContentType="Audio"
          ContentPath="Audio/cute-level-up-3.mp3"
            OnReadyToUse="OnReadyToUse_It" />

<input type="range" min="0" @bind="currentTime" 
       max="@duration" step="0.1" @oninput="SetCurrentTime"/>

<VUIElement ID="VideoDuration" ContentType="Text"
            OnReadyToUse="OnReadyToUse_It" />

@code {
    double currentTime = 0;
    double duration = 0;
    Dictionary<string, VUIElement> Elements = new Dictionary<string, VUIElement>();
    private int currentCount = 0;
    private string transitionType = "UIState";


    private void OnClicked(VUIElement btn)
    {
        currentCount++;
    }

    async void SetCurrentTime(ChangeEventArgs e)
    {
        await Elements["Video"].SetCurrentTime(Convert.ToDouble(e.Value));
    }

    private async void OnCurrentTimeUpdate_Video(VUIElement video)
    {
        currentTime = video.CurrentTime;

        if (currentTime >= duration)
        {
            currentCount--;

            PlayVideo();
        }
    }

    private async void OnClicked_ResetCounting(VUIElement btn)
    {
        PlayVideo();
    }

    private async void PlayVideo()
    {
        if (currentCount > 0)
        {
            await Elements["Audio"].Play();

            await Elements["Video"].Play();
        }
    }

    private async void OnMouseDown(VUIElement btn)
    {
        await VUITransitionManager.TransitionTo(btn, 0, "MouseDown", 0, new string[] { "Clicked" });
    }

    private async void OnMouseLeave(VUIElement btn)
    {
        await VUITransitionManager.TransitionTo(btn, 300, "Normal", 0, new string[] { "All" });

        VUITransitionManager.StopTransition(btn);
    }

    private async void OnReadyToUse_It(VUIElement _e)
    {
        if (!string.IsNullOrEmpty(_e.ID) && !Elements.ContainsKey(_e.ID))
        {
            Elements.Add(_e.ID, _e);
        }

        if (Elements.ContainsKey("Video") &&
            Elements.ContainsKey("VideoDuration"))
        {
            Elements["VideoDuration"].Text = 
                $"{Elements["Video"].Duration}";

            duration = Elements["Video"].Duration;
        }
    }
}
